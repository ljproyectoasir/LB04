# definicion global
global
        # definimos el log local mediante socket
        log /dev/log syslog
        # numero maximo de conexiones globales
        maxconn 4096
        # usuario y grupo que ejecuta haproxy
        user haproxy
        group haproxy
        # indicamos que se va a ejecutar como demonio/servicio
        daemon
        # indicamos el path del fichero de PID
        pidfile /var/run/haproxy/haproxy.pid
        # con esta directiva habilitamos el uso de estad√≠sticas por socket
        stats socket /var/run/haproxy/haproxy_stats.socket

# configuracion por defecto que se aplica a todos los frontend salvo si sobreescribe
defaults
        ### se usa el log definido en la seccion global ###
        log global
        ### indicamos que el modo es tcp ya que se trata de un balanceador tcp ###
        mode tcp
        ### indicamos el numero de reintentos de chequeo de un servidor de backend antes de darlo por muerto ###
        retries 3
        ### permite que un cliente sea redirigido si tiene persistencia en un servidor de backend que se cae ###
        option redispatch
        ### numero maximo de conexiones en el balanceador ###
        maxconn 4096
        ### timeouts en milisegundos ###
        ### tiempo maximo para conectar a un servidor de backend ###
        timeout connect 10000
        ### tiempo que esperamos a un cliente inactivo ###
        timeout client 50000
        ### tiempo que esperamos a un servidor inactivo ###
        timeout server 50000

### definimos un nuevo proxy (listen) para acceder a las estadisticas de haproxy mediante web ###
listen stats  10.0.30.15:1935
        ### indicamos que el frontend es de tipo HTTP ###
        mode http
        ### activamos las estadisticas ###
        stats enable
        ### ocultamos la version en las estadisticas ###
        stats hide-version
        ### indicamos la URL sobre la que estan accesibles las estadisticas y el tiempo de refresco automatico ###
        stats uri /
        stats refresh 10s

### definimos el balanceador para base de datos mysql-percona mediante un proxy definido con listen ###
listen Percona 10.0.30.15:3306
        ### indica el algoritmo de balanceo utilizado, rounrobin incluye peso ###
        balance roundrobin
	### checkeo para comprobar si el servicio mysql funciona ###
        option mysql-check user haproxy
	### check provoca que los servidores sean comprobados cada cierto tiempo para mantenerlos activos ###
        ### inter indica el tiempo en milisengundos entre chequeos ###
        ### rise indica el numero de chequeos positivos consecutivos necesarios para considerar el servidor backend online ###
        ### fall indica el numero de chequeos negativos consecutivos necesarios para considerar el servidor backend caido ###
        ### weight indica el peso del servidor de backend dentro del conjunto ###
        server Tyene 10.0.40.10:3306 check 
        server Obara 10.0.40.20:3306 check 
        server Nymeria 10.0.40.30:3306 check 

### definimos el balanceador para base de datos redis mediante un proxy definido con listen ###
listen Redis 10.0.30.15:6379

        ### indica el algoritmo de balanceo utilizado ###
	balance first
	### checkeo para comprobar si el servicio redis funciona y solo activa el que tiene el rol maestro ###
	option tcp-check
	tcp-check connect
	tcp-check send auth\ invernalia\r\n
	tcp-check send PING\r\n
	tcp-check expect string +PONG
	tcp-check send info\ replication\r\n
	tcp-check expect string role:master
	tcp-check send QUIT\r\n
	tcp-check expect string +OK
	### check provoca que los servidores sean comprobados cada cierto tiempo para mantenerlos activos ###
        ### inter indica el tiempo en milisengundos entre chequeos ###
	server Tyrion 10.0.30.20:6379 check inter 2000
	server Alton 10.0.30.10:6379 check inter 2000

